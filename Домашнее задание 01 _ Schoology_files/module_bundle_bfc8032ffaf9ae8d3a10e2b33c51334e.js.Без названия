Drupal.behaviors.s_user = function(context){

    $('#s-user-custom-notifications-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        //handle select all functionality in custom notification form
        var form = $(this);
        var selectAll = $('.select-all', form);
        selectAll.click(function(){
            var checked = $(this).is(':checked');
            $('.realm-setting', form).each(function(){
                $(this).prop('checked', checked);
            });
        });

        $('.edit-select-all-wrapper', form).click(function(){
            $('input', this).click();
        });


        $('.realm-setting').each(function(){
            var realmSetting = $(this);
            realmSetting.change(function(){
                if(!realmSetting.attr('checked') && selectAll.attr('checked')){
                    selectAll.prop('checked', false);
                }
            });
        });

        $('.cancel-btn', form).click(function(e){
            //reset the value of the correspoding select form in the notifications setting to its original value
            var setting = $('.setting-name', form).val();
            var selectVal = $('.original-setting', form).html();
            $('select[name=' + setting + ']').selectmenu('value', selectVal);
            var popup = Popups.activePopup();
            if(popup != null){
                popup.close();
            }
            e.preventDefault();
        });

    });

    $('.notifications-header:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        // handles reset to default for notification settings
        if(Drupal.settings.s_user != 'undefined' && typeof Drupal.settings.s_user.notif_defaults != 'undefined'){
            var setting = Drupal.settings.s_user;
            $('.reset-default').click(function(){
                $('select.notif-setting-select').each(function(){
                    var name = $(this).attr('name');
                    if(typeof setting.notif_defaults[name] != 'undefined'){
                        $(this).selectmenu('value', setting.notif_defaults[name]);
                    }
                });
            });
        }
    });

    $('#s-user-set-notifications-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        //open popup for for when "custom" is selected
        $('select.notif-setting-select').each(function(){
            var select = $(this);
            select.selectmenu({
                style: 'dropdown'
            });
            select.change(function(){
                if(select.val() == '2'){
                    var href = '/user/custom_notification/' + select.attr('name');
                    Popups.openPath(this, {
                        href : href,
                        ajaxForm : false,
                        extraClass : 'popups-custom-notification popups-medium'
                    }, window);
                }
            });
        });
    });

    $('#s-user-invite-colleague-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        ZeroClipboard.setMoviePath( '/sites/all/misc/zeroclipboard/zeroclipboard.swf' );
        var clip = new ZeroClipboard.Client();
        clip.setHandCursor( true );
        var text = $('#invite_link #url').html();
        text = text.replace(/&amp;/g, '&');
        clip.setText(text);
        var html = '<span class="zclipboard" style="position:absolute;">' + clip.getHTML( $('#invite_link').outerWidth(), $('#invite_link').outerHeight() ) + '</span>';
        $('.popups-body').append(html);
        repositionZClipboard();

        clip.addEventListener( 'complete', function(client, text) {
            if($('.copied-wrapper').length == 0){
                $('.popups-body').append('<span class="copied-wrapper">Link copied to your clipboard</span>');
            }
            else{
                $('.copied-wrapper').show();
            }
            setTimeout(function(){
                $('.copied-wrapper').fadeOut(400, function(){
                    sPopupsResizeCenter();
                });
            }, 2500);
            sPopupsResizeCenter();
        });

        $('.addresses').focus(function(){
            if($(this).hasClass('pre-fill')){
                $(this).empty();
                $(this).removeClass('pre-fill');
            }
            repositionZClipboard();
        });

        if($('#s-user-invite-colleague-form').hasClass('emails-sent'))
        {
            $('#s-user-invite-colleague-form').removeClass('emails-sent');
            $('.popup-invite').addClass('emails-sent');
            sPopupsResizeCenter();
        }

        $('#s-user-invite-colleagues-invite-by-email').bind('click',
            function(e) {
                $('.popup-invite').addClass('sending-emails');
                $('#s-user-invite-colleagues-invite-choices,#s-user-invite-colleagues-click-to-copy-link,#s-user-invite-colleagues-click-to-copy-title').fadeOut(300,
                    function() {
                        $('#edit-emails,.s-user-invite-colleagues-invite-by-email-buttons').fadeIn(300,
                            function() {
                                repositionZClipboard();
                            }
                            );
                    }
                    );
                e.preventDefault();
            }
            );

        $('#s-user-invite-colleagues-invite-by-email-cancel').unbind('click');
        $('#s-user-invite-colleagues-invite-by-email-cancel').bind('click',
            function(e) {
                $('.popup-invite').removeClass('sending-emails');
                $('#edit-emails,.s-user-invite-colleagues-invite-by-email-buttons').fadeOut(300,
                    function() {
                        $('#s-user-invite-colleagues-invite-choices,#s-user-invite-colleagues-click-to-copy-link,#s-user-invite-colleagues-click-to-copy-title').fadeIn(300,
                            function() {
                                repositionZClipboard();
                            }
                            );
                    }
                    );
                e.preventDefault();
            }
            );

        $("#s-user-invite-colleagues-fb-button,#s-user-invite-colleagues-twitter-button").click(
            function(e) {
              window.open($(this).attr('realhref'), 'popup', 'width=650,height=380', false);
              e.preventDefault();
              return false;
            }
        );
    });

    $("a.show-code").click(function(){
        var value = $(this).attr('id');
        var value = value.split("-");
        var html = '<div class="formatted-code">Code: '+value[1]+'</div>';
        $.prompt(html);
        return false;
    });

    $("input#action-select-all").click(function(){
        var parent = $(this);
        $("#s-user-manage-activation-form table input:checkbox").each(function(){
            if($(this).attr('checked')){
                $(parent).prop('checked', false);
                $(this).prop('checked', false);
            }
            else{
                $(parent).prop('checked', true);
                $(this).prop('checked', true);
            }
        });
    });

    $('#s-user-edit-calendar-feed-settings-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        $('#webcal-addr', $(this)).focus(function(){
            document.getElementById('webcal-addr').select();
        }).mouseup(function(e){
            e.preventDefault();
        });

    });

    $('#s-user-profile-editor-profile-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        $('textarea', $(this)).elastic();

        var learnerWrapper = $('.learner-style-wrappper');
        var defaultLearnerRadioBtnWrapper = $('#edit-profile-about-learner-style-0-wrapper', learnerWrapper);
        var defaultLeanerRadioBtn = $('input[type=radio]', defaultLearnerRadioBtnWrapper);
        defaultLearnerRadioBtnWrapper.hide();
        sCommonFormRadioGroup(learnerWrapper, defaultLeanerRadioBtn);
    });

    $('#s-user-personal-account-settings-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
      var form  = $(this);
      $('.timezone-select-time .timezone-use-list', form).bind('click', function(){
        $(this).parent().hide();
        $('.timezone-select-timezone', form).show();
        $('#edit-timezone-select-type', form).val('timezone');
      });
      $('.timezone-select-timezone .timezone-use-time', form).bind('click', function(){
        $(this).parent().hide();
        $('.timezone-select-time', form).show();
        $('#edit-timezone-select-type', form).val('time');
      });

      //only display the show preferred name dropdown if a preferred name has been set
      $('#edit-user-name-first-preferred').on('keydown paste input', function(e){
        var $textbox = $(this);
        var hasPreferredName = !!$textbox.val().length;
        var $namePreferredWrapper = $textbox.closest('.name-first-preferred-wrapper');
        var $usePreferredName = $('.use-name-first-preferred-wrapper');
        var usePreferredNameVisible = !$usePreferredName.hasClass('hidden');
        if(hasPreferredName != usePreferredNameVisible){
          $usePreferredName.toggleClass('hidden', usePreferredNameVisible);
          $namePreferredWrapper.toggleClass('has-preferred-first-name', hasPreferredName);
        }
      });
    });

    $('.s-js-name-title-wrapper:not(.sUser-processed)', context).addClass('sUser-processed').each(function(){
      var titleWrapper = $(this),
          customField = $('.s-js-name-title-custom', titleWrapper);
      $('.s-js-name-title-select', titleWrapper).change(function(e){
        if($(this).val() == 'custom'){
          titleWrapper.addClass('s-js-name-title-custom-enabled');
        }
        else{
          titleWrapper.removeClass('s-js-name-title-custom-enabled');
          customField.val('');
        }
      }).triggerHandler('change');
    });

    //performs logout when an account is deleted
    if($('.logout-exec').text() == '1'){
        var url = location.href;
        index = url.indexOf('settings/');

        var logoutHref = '/logout?';
        if (Drupal.settings.s_common.hasOwnProperty('logout_token')){
            logoutHref += 'ltoken='+Drupal.settings.s_common.logout_token+'&';
        }
        logoutHref += 'destination=home.php?deleted';
        newUrl = url.substring(0,index) + logoutHref;
        location.href = newUrl;
    };



   $('.profile-picture-wrapper:not(.sUser-processed)', context).addClass('sUser-processed').each(function(){
        var wrapper = $(this);
        var link = $('.edit-profile-picture-hover', wrapper);
        var pic = $('.profile-picture', wrapper);
        var uploader = $('#profile-picture-uploader-wrapper', wrapper);

        link.bind('click', function(){
          if(uploader.is(':visible')){
            uploader.hide();
          }
          else {
            uploader.show();
          }
        });
        $('body').bind('click', function(e){
            var target = $(e.target);
            if(!target.hasClass('profile-picture-wrapper') && target.parents('.profile-picture-wrapper').length == 0){
              uploader.hide();
            }
          });

        pic.bind('s_profile_picture_uploaded', function(e, path){
	      	$('img', $(this)).attr('src', path).removeAttr('height');
	        uploader.hide();
	      });

      });

  // remove a push notification device on the notifications settings page
  $('.push-remove:not(.sUser-processed)', context).addClass('sUser-processed').bind('click', function(e){
    e.preventDefault();

    var linkObj = $(this);
    var deviceNameString = '<span class="confirm-remove-device-name">' + linkObj.siblings('.push-os').html() + '</span>';
    var removeDevicePopupBody = '<span class="confirm-message">' +
      Drupal.t('Are you sure you want to deactivate !device_name?', {"!device_name" : deviceNameString}) +
      '</span>';

    sCommonConfirmationPopup({
      title: Drupal.t('Deactivate Device'),
      body: removeDevicePopupBody,
      extraClass: 'push-remove',
      confirm: {
        text: Drupal.t('Deactivate'),
        func: function(){
          $.ajax(linkObj.attr('href'), {
            data: {ajax: true},
            success: function(data){
              if(data.body){
                $('#content-wrapper').html(data.body);
                if(data.messages){
                  var mainWrapperObj = $('#main-content-wrapper');
                  mainWrapperObj.children('.messages').remove();
                  mainWrapperObj.prepend(data.messages);
                }
                Drupal.attachBehaviors($('#main-content-wrapper'));
              }
            },
            complete: function(){
              Popups.activePopup().close();
            }
          });
        }
      }
    });
  });
}

function repositionZClipboard(){
    var offset = $('#invite_link').offset();
    var pOffset = $('.popups-box').offset();
    $('.zclipboard').css('left', offset.left - pOffset.left);
    $('.zclipboard').css('top', offset.top - pOffset.top);
}
;function sGradeItemSelectScaleChange(form, gsSelectObj, show_dialog) {
  var gsSelectArea = gsSelectObj.parents('.grading-scale-select-grouping');

  var newVal = gsSelectObj.val();
  var rubric_objective_count = $('.tag-item-from-rubric').length;

  // Rubric selection
  if (Drupal.settings.s_grading_rubrics !== undefined && (Drupal.settings.s_grading_rubrics[newVal] !== undefined || newVal == 'r')) {

    // Show confirmation popup if action would clear existing learning objectives
    var aligned_objective_count = $('.tag-item:not(.tag-item-from-rubric)').length;
    // If learning objectives would be cleared by the action, show dialog
    if (show_dialog && (newVal != 'r' && rubric_objective_count + aligned_objective_count > 0)) {
      if (Drupal.settings.s_grading_rubrics_info[newVal] && 'rubric' in Drupal.settings.s_grading_rubrics_info[newVal]) {
        var rubric_title = Drupal.settings.s_grading_rubrics_info[newVal].rubric.title + ' ';
      } else {
        var rubric_title = "Current rubric ";
      }
      sReplaceLearningObjectivesPopup(form, gsSelectObj, rubric_title, function(result){
        if (result) {
          sGradeItemChangeRubric(form, gsSelectObj);
          $(document).data('previous_scale_selection', $(':selected', gsSelectArea));
        }
      });
    } else {
      sGradeItemChangeRubric(form, gsSelectObj);
      $(document).data('previous_scale_selection', $(':selected', gsSelectArea));
    }
  }
  // Scale selection
  else {
    // popup ?
    if (show_dialog && rubric_objective_count > 0) {
      sReplaceLearningObjectivesPopup(form, gsSelectObj, 0, function(result){
        if (result) {
          sGradeItemChangeScale(form, gsSelectObj);
          $(document).data('previous_scale_selection', $(':selected', gsSelectArea));
        }
      });
    } else {
      sGradeItemChangeScale(form, gsSelectObj);
      $(document).data('previous_scale_selection', $(':selected', gsSelectArea));
    }
  }

  sPopupsResizeCenter();
}

function sGradeItemChangeScale(form, gsSelectObj) {

  var gsSelectArea = gsSelectObj.parents('.grading-scale-select-grouping');
  var newVal = gsSelectObj.val();
  var maxPointsObj = $('#edit-max-points', form);

  $('.option-show-scale', gsSelectArea).addClass('hidden');
  $('#edit-chosen-rubric', gsSelectArea).addClass('hidden');
  $('#edit-selected-rubric').val('');

  // Is this a non-percentage grading scale? Then set the max points and disable the input
  var optionValObj = $($('option[value=' + String(newVal) + ']', gsSelectObj).text());
  var maxPointsSet = !optionValObj.hasClass('scale-type-scale');

  maxPointsObj.prop('disabled', maxPointsSet);
  if (maxPointsSet) {
    var maxPoints = optionValObj.attr('max');
    maxPointsObj.addClass('disabled');
    maxPointsObj.val(maxPoints);
  }
  else {
    maxPointsObj.removeClass('disabled');
  }
  sAlignmentEnableAlignmentButton();
  sPopupsResizeCenter();
}

function sGradeItemChangeRubric(form, gsSelectObj) {
  var gsSelectArea = gsSelectObj.parents('.grading-scale-select-grouping');
  var newVal = gsSelectObj.val();
  var maxPointsObj = $('#edit-max-points', form);
  var selectedRubric = $('#edit-selected-rubric');
  var clearSelection = newVal == "0";

  var newTotalPoints = 0;
  if (Drupal.settings.s_grading_rubrics_info[newVal] && 'rubric' in Drupal.settings.s_grading_rubrics_info[newVal]) {
    sAlignmentRubricUpdate(Drupal.settings.s_grading_rubrics_info[newVal].rubric);
  }

  if (newVal == 'r') {
    $('#grading-rubric-launch-btn', form).click();
    selectedRubric.val('e');
  }
  else if (!clearSelection) {
    newTotalPoints = Drupal.settings.s_grading_rubrics[newVal];
  }

  if (!clearSelection) {
    $('.option-show-scale', gsSelectArea).removeClass('hidden');
    $('#edit-chosen-rubric', gsSelectArea).removeClass('hidden');
    maxPointsObj.val(newTotalPoints);
    maxPointsObj.prop('disabled', true);
    maxPointsObj.addClass('disabled');
    if (newVal != 'r') {
      selectedRubric.val(newVal);
    }
    var broadCastId = newVal == 'r' ? 'e' : newVal;
    sAngular.rootScopeBroadcast('rubricActiveIdChange', broadCastId);
    sAlignmentDisableAlignmentButton();
  }
  else {
    sGradeScaleClearRubricSelection(gsSelectArea);
  }
  sPopupsResizeCenter();
}

/**
 * Creates the selectmenu dropdown for the scale/rubric list.
 *
 * @param form - the container form to search within
 * @param regenerate - if true, will destroy and recreate selectmenu if exists
 */
function sGradeScaleProcessRubricDropdown(form, regenerate) {
  $('.grading-scale-select-grouping').each(function() {
    var gsSelectArea = $(this);
    var selectMenuItem = $('select', gsSelectArea);

    if (gsSelectArea.hasClass('sGradesItemAddForm-processed')) {
      if (!regenerate) {
        return;
      } else {
        selectMenuItem.selectmenu('destroy');
      }
    } else {
      gsSelectArea.addClass('sGradesItemAddForm-processed')
    }

    if (!selectMenuItem.length){
      $('#edit-chosen-rubric', form).click(function () {
        $('#grading-rubric-launch-btn', form).click();
        sAngular.rootScopeBroadcast('rubricActiveIdChange', $('#edit-selected-rubric').val());
      });
      return;
    }

    // initiate the jQuery selectmenu for styling
    selectMenuItem.selectmenu({style: 'dropdown'});

    // Skip event handling if this selectbox is inside a nested "Copy To Courses" form
    var isCopyToCoursesForm = gsSelectArea.parents("div#copy-to-courses").length > 0;
    if (!isCopyToCoursesForm) {
      // restrict event handlers to first time initialization:
      if (!regenerate) {
        $('#edit-chosen-rubric', gsSelectArea).click(function () {
          $('#grading-rubric-launch-btn', form).click();
          sAngular.rootScopeBroadcast('rubricActiveIdChange', $('#edit-selected-rubric').val());
        });
        //trigger rubric editor when chosen
        selectMenuItem.change(function (e) {
          // store the current selection
          sGradeItemSelectScaleChange(form, $(this), true);
          e.preventDefault();
        });
      }
      // if a scale is selected
      if (selectMenuItem.val() != "0") {
        sGradeItemSelectScaleChange(form, selectMenuItem, false);
      }
    }
  });
}

function sGradeScaleClearRubricSelection(gsSelectArea){
  $('.option-show-scale', gsSelectArea).addClass('hidden');
  $('#edit-chosen-rubric:not(.display-only)', gsSelectArea).addClass('hidden');
  sAlignmentClearAlignments(true);
  sAlignmentEnableAlignmentButton();
}

/**
 * Helper that displays popup with warning message when changing from rubrics to LO's (learning objectives).
 *
 * @param {jQuery} form
 * @param {jQuery} gsSelectObj
 * @param {string} rubricTitle
 * @param {Function} fnOnResponse
 */
function sReplaceLearningObjectivesPopup(form, gsSelectObj, rubricTitle, fnOnResponse) {
  var message, buttonText, isAssessment = $('#s-assessment-question-edit-form').length;

  if (isAssessment && !rubricTitle){
    message = Drupal.t('Removing this rubric will remove all learning objectives aligned from this question. Would you like to remove this rubric?');
    buttonText = Drupal.t('Remove Rubric');
  } else {
    if (rubricTitle) {
      // sanitize rubric title to prevent XSS
      rubricTitle = htmlentities(rubricTitle);
      buttonText = Drupal.t('Select Rubric');
      message = rubricTitle + ' ' + Drupal.t('contains learning objectives that will replace the learning objectives attached to this assignment. Would you still like to select this rubric?')
    } else {
      message = Drupal.t('Selecting this scale will remove all of the learning objectives aligned to this assignment.  Would you like to select this scale?');
      buttonText = Drupal.t('Select Scale');
    }
  }

  var gsSelectArea = gsSelectObj.parents('.grading-scale-select-grouping');
  var popupSettings = {
    extraClass: 'popups-small',
    title: Drupal.t('Replace Learning Objectives'),
    body: message,
    confirm: {
      text: buttonText,
      func: function() {
        sPopupsClose();
        sAlignmentClearAlignments(false);
        sGradeItemChangeScale(form, gsSelectObj);
        $(document).data('previous_scale_selection', $(':selected', gsSelectArea));
        fnOnResponse(true);
      }
    },
    cancel: {
      func: function() {
        // do not change selection
        var previous_scale_selecton = $(document).data('previous_scale_selection');
        if (typeof previous_scale_selecton === 'undefined'){
          previous_scale_selecton = 0;
        }
        $('#edit-grading-scale-id').selectmenu('value', previous_scale_selecton.index());
        fnOnResponse(false);
      }
    }
  };

  sCommonConfirmationPopup(popupSettings);
}
;// Common date helper methods
/**
 * Takes localized string, either UK or US format, and converts
 * to a Date() object.
 *
 * @param {string} localizedDate - Date in mm/dd/yy or dd/mm/yy format
 * @return {Date}
 */
function sCommonDateFromLocalizedString(localizedDate) {
  var dateFormatLanguage = sCommonGetDateFormat();
  var dateStartsWithMonth = dateFormatLanguage === 'en';
  var dateComponents = localizedDate.split('/');
  var month = dateStartsWithMonth ? dateComponents[0] : dateComponents[1];
  var day = dateStartsWithMonth ? dateComponents[1] : dateComponents[0];
  var year = '20' + dateComponents[2]; // Add '20' for 20xx years, otherwise Date() will assume it's 19xx
  return new Date(Date.UTC(parseInt(year), parseInt(month) - 1, parseInt(day)));
}

/**
 * Gets a normalized date format language either: 'en-GB' or 'en'
 *
 * @returns {string}
 */
function sCommonGetDateFormat() {
  var ukFormat = 'en-GB';
  // backend / rest of SGY Core doesn't use standard date formatting, it's either 'en-GB' or 'US' format.
  if (Drupal.settings.s_common.date_format_language === undefined || Drupal.settings.s_common.date_format_language !== ukFormat) {
    return 'en';
  }
  return ukFormat;
}

/**
 * Checks if date is within range
 *
 * @param {object} dateRange - json object with start/end dates of grading period dates
 * @param {string} date - Current selected due date string in the format 'MM/DD/YY' or 'DD/MM/YY'
 * @returns {boolean}
 */
function sCommonDateInRange(dateRange, date) {
  if (dateRange === 'undefined' || dateRange == null) {
    return false;
  }
  var startDate = new Date(dateRange['start']);
  var endDate = new Date(dateRange['end']);
  var dateValue = sCommonDateFromLocalizedString(date);
  return dateValue >= startDate && dateValue <= endDate;
}

/**
 * Helper to check if grade item form should show due date warning
 *
 * @param {object} gradeEnabledField - Checkbox for enabling/disabling grade
 * @param {object} gradePeriodField - Grade period select field
 * @param {object} dueDateField - Due date input field
 * @return {boolean}
 */
function sCommonShouldShowDueDateWarning(gradeEnabledField, gradePeriodField, dueDateField) {
  // If no grading period dates were passed up, then the form we're showing has no grading period (such as creating
  // discussions within a group or school)
  if (Drupal.settings.grading_period_dates === undefined) {
    return false;
  }

  // If Grading is disabled, no need to validate due date
  if (gradeEnabledField.val() !== undefined && !gradeEnabledField.is(':checked')) {
    return false;
  }

  // If there's no grading period, don't show warning (there's no range)
  var gradingPeriodId = parseInt(gradePeriodField.val());
  if (gradingPeriodId === 0) {
    return false;
  }

  var gradingPeriodDates = Drupal.settings.grading_period_dates[gradingPeriodId];
  var showWarning = false;
  // Iterate through each due date field (CSL has a due date for each section)
  dueDateField.each(function () {
    var val = $(this).val();
    if (val !== "" && !sCommonDateInRange(gradingPeriodDates, val)) {
      showWarning = true;

      // Break the jquery each loop
      return false;
    }
  });

  return showWarning;
}

/**
 * Helper to get translated and formated date string in either
 * MMM DD, YYYY or DD MMM, YYYY
 *
 * @param {Date} date
 * @return {string}
 */
function sCommonDateFormatToString(date) {
  var dateOfMonth = date.getUTCDate();
  var month = date.toLocaleDateString('en',
    {
      month: "long",
      timeZone: 'UTC'
    });
  var monthTranslated = Drupal.date_t(month, 'month_abbr');
  var year = date.getUTCFullYear();

  if (sCommonGetDateFormat() === 'en-GB') {
    return dateOfMonth + " " + monthTranslated + ", " + year;
  }
  return monthTranslated + " " + dateOfMonth + ", " + year;
}

/**
 * Helper to get due date warning text if due date is out of range
 *
 * @param {object} gradePeriodField
 */
function sCommonDateDueDateWarningText(gradePeriodField) {
  var gradingPeriodId = parseInt(gradePeriodField.val());
  var gradingPeriodDates = Drupal.settings.grading_period_dates[gradingPeriodId];
  var gradingPeriodName = gradePeriodField.text();
  var startDate = sCommonDateFormatToString(new Date(gradingPeriodDates['start']));
  var endDate = sCommonDateFormatToString(new Date(gradingPeriodDates['end']));
  return Drupal.t('The due date falls outside the selected grading period: @gradingPeriodName: @startDate to @endDate',
    {
      '@gradingPeriodName': gradingPeriodName,
      '@startDate': startDate,
      '@endDate': endDate,
    });
}

/**
 * Add due date warning to form
 *
 * @param {string} warningText
 * @param {object} siblingElement
 * @param {object} form
 */
function sCommonDateAddDueDateWarning(warningText, siblingElement, form) {
  sCommonDateRemoveDueDateWarning(form);
  // SVG Comes from Backpack.
  var icon = '<svg class="due-date-warning-icon" viewBox="0 0 23 22" width="100%" height="100%">' +
    '<g fill="#fac901" fill-rule="evenodd">' +
    '<path stroke="#333" d="M9.636 2.006c.975-1.814 2.751-1.815 3.727 0l8.665 16.111c.967 1.798.02 3.383-2.027 3.383H2.998C.957 21.5.004 19.914.971 18.117L9.636 2.006z"></path>' +
    '<path fill="#333" fill-rule="nonzero" d="M10.748 13.66l-.219-3.275a24.374 24.374 0 0 1-.061-1.374c0-.379.099-.674.297-.886.198-.211.46-.317.783-.317.392 0 .654.135.786.406.132.272.198.662.198 1.173 0 .3-.016.606-.048.916l-.294 3.37c-.031.4-.1.709-.205.923a.537.537 0 0 1-.52.321c-.245 0-.416-.104-.512-.311-.096-.207-.164-.523-.205-.947zm.759 4.497c-.278 0-.52-.09-.728-.27-.208-.18-.311-.432-.311-.755 0-.283.099-.523.297-.721a.99.99 0 0 1 .728-.298c.287 0 .532.1.735.298a.971.971 0 0 1 .304.72c0 .32-.102.57-.307.753a1.047 1.047 0 0 1-.718.273z"></path>' +
    '</g>' +
    '</svg>';
  var output = '<div class="form-item due-date-warning-wrapper">' +
    '<div>' + icon + '</div>' +
    '<div class="due-date-warning-text">' + warningText + '</div>' +
    '</div>';
  siblingElement.after(output);
}

/**
 * Remove due date warning
 * @param {object} form
 */
function sCommonDateRemoveDueDateWarning(form) {
  $(".due-date-warning-wrapper", form).remove();
}
;Drupal.behaviors.sGradesItemAddForm = function (context) {
  $('#s-discussion-create-form:not(.sGradesItemAddForm-processed), #s-grade-item-add-form:not(.sGradesItemAddForm-processed), #s-assessment-question-edit-form:not(.sGradesItemAddForm-processed), #s-grade-item-edit-grades-form:not(.sGradesItemAddForm-processed)', context).addClass('sGradesItemAddForm-processed').each(function () {

    var form = $(this);
    var dateField = $("input[name='due_date[date]'], .csm-due-date", form);
    var timeField = $("input[name='due_date[time]']", form);

    if (dateField.prop('disabled')) {
      timeField.prop('disabled', true);
    }

    // when the popups close, close any opened rubrics editor opened
    $(document).bind('popups_before_remove', function (event, popup) {
      var formIds = [
        's-discussion-create-form',
        's-grade-item-add-form',
        's-grade-item-edit-grades-form'
      ];

      var formId = $('form', $('#' + popup.id)).attr('id');

      if (formIds.indexOf(formId) !== -1) {
        // legacy mastery
        $('.s-grading-rubric .close-btn').click();
        // district mastery
        $('.rubric-grades-edit .cancel-btn').click();
      }
    });

    form.on('click', '.factor-toggler', function () {
      $('.factor-wrapper', form).removeClass('hidden');
      $(this).addClass('hidden');
      sPopupsResizeCenter();
    });

    $('.s-grade-item-addl-course-due, .addl-course-options', form).each(function () {
      if ($('.due-date', this).prop('disabled')) {
        $('.time-input input', this).prop('disabled', true);
      }
    });

    dateField.blur(function () {
      var dropboxField = $('#edit-dropbox-enabled');
      dropboxEnabled = dropboxField.is(':checked') || !dropboxField.length;
      dateFieldContext = $(this);
      if (dateFieldContext.hasClass('csm-due-date')) {
        timeFieldContext = dateFieldContext.closest('.container-inline-date').find('.time-input').find('input');
      }
      else {
        timeFieldContext = timeField;
      }
      setTimeout(function () {
        if (dateFieldContext.val() != '' && timeFieldContext.val() == '' && dropboxEnabled) {
          timeFieldContext.val('11:59PM');
        }
      }, 200);
    });

    var toggleDateWarning = function() {
      if (sGradeItemShouldShowDueDateWarning(form)) {
        sGradeItemAddDueDateWarning(form);
        // Expand the grading options when an alert is shown if it's not shown already
        $('.category-options-wrapper, .grading-options-wrapper', form).toggle(true);
      } else {
        sCommonDateRemoveDueDateWarning(form);
      }
      sPopupsResizeCenter();
    };

    toggleDateWarning();
    dateField.change(toggleDateWarning);
    $("select[name='grading_period_id'], select[name='grading_period_id_final']", form).change(toggleDateWarning);
    $(".section-selection input", form).change(toggleDateWarning);
    $("input[name='enable_grading']", form).change(toggleDateWarning);

    $('#edit-dropbox-enabled', form).change(function () {
      dropboxEnabled = $(this).is(':checked');
      if ($("input[name='due_date[date]']").val() != '' && $("input[name='due_date[time]']").val() == '' && dropboxEnabled) {
        $("input[name='due_date[time]']").val('11:59PM');
      }
      context = $('#copy-to-courses');
      $('.due-date', context).each(function () {
        if ($(this).val() != '' && dropboxEnabled) {
          parent = $(this).parents('.addl-course').filter(':first');
          if ($('.time-input input', parent).val() == '') {
            $('.time-input input', parent).val('11:59PM');
          }
        }
      });
    });

    $(document).bind('popups_before_serialize', function (e, $form) {
      $('#edit-max-points', form).removeClass('disabled');
      $('#edit-max-points', form).prop('disabled', false);

    });


    sGradeScaleProcessRubricDropdown(form);

    // advanced options show/hide
    var advancedWrapper = $('.advanced-options-wrapper', form);
    $(".toggle-advanced-options", form).click(function () {
      sPopupsResizeCenter();
      if (advancedWrapper.is(':visible')) {
        $(this).removeClass('active');
        advancedWrapper.hide();
      }
      else {
        $(this).addClass('active');
        advancedWrapper.show();
      }
      return false;
    });

    $('body').click(function (e) {
      var target = $(e.target);
      if (advancedWrapper.is(':visible') && !target.hasClass('advanced-options-wrapper') && target.parents('.advanced-options-wrapper').length == 0)
        $(".toggle-advanced-options", form).click();
    });

    sGradesApplyHoverListener(form, '#category-wrapper .form-select');

    // create new category
    $("#edit-new-category-wrapper input").focus(function () {
      var defaultText = Drupal.t('e.g. Homework');
      var el = $(this);
      if (el.val() == defaultText) {
        el.val('');
        el.removeClass('pre-fill');
      }
    }).blur(function () {
      var defaultText = Drupal.t('e.g. Homework');
      var el = $(this);
      if (el.val() == '') {
        el.val(defaultText);
        el.addClass('pre-fill');
      }
    });

    var categorySelect = $('select[name=grading_category_id]', form),
      newCategoryInput = categorySelect.parent().siblings('#edit-new-category-wrapper'),
      newCategoryCancel = categorySelect.parent().siblings('.edit-new-category-cancel');

    // fill in defaults for selected category
    newCategoryInput.hide();
    newCategoryCancel.hide();
    categorySelect.change(function () {
      var category = $(this).val();
      if (category == 'new') {
        newCategoryInput.show();
        newCategoryCancel.show();
        categorySelect.hide();
      }
      else {
        newCategoryInput.hide();
        newCategoryCancel.hide();
        categorySelect.show();
      }
      sPopupsResizeCenter();
      return true;
    });

    // cancel new category input
    newCategoryCancel.click(function () {
      categorySelect.val('').triggerHandler('change');
    });

    // copy to courses
    var addlCoursesCheckboxes = $('#addl-courses .addl-course input[type=checkbox][name$="[enabled]"]', form),
      copyToCoursesBtn = $('.adv-option-btn.toggle-copy', form);
    addlCoursesCheckboxes.each(function () {
      var addlElements = $(this).parent().parent().siblings();
      $(this).click(function () {
        var checked = $(this).is(':checked'),
          contextForm = $(this).parents('.addl-course').filter(':first');
        if (checked) {
          var mainDueWrapper = $("#edit-due-date-wrapper", form);
          var dueDate = $("input:first", mainDueWrapper).val();
          var hasTime = $("input[type=checkbox]", mainDueWrapper).is(":checked");
          var dueTime = $("input:last", mainDueWrapper).val();
          var addlCourseDueWrapper = $('.container-inline-date', addlElements);
          $("input:first", addlCourseDueWrapper).val(dueDate);
          $("input[type=checkbox]", addlCourseDueWrapper).attr('checked', hasTime);
          $("input:last", addlCourseDueWrapper).val(dueTime);
          if (!hasTime) {
            $("input[type=checkbox]", addlCourseDueWrapper).next().hide();
            $("input[type=checkbox]", addlCourseDueWrapper).next().val('');
          }
          addlElements.show();
        }
        else {
          addlElements.hide();
        }

        $('.due-date', contextForm).blur(function () {
          context = this;
          parent = $(this).parents('.addl-course').filter(':first');
          setTimeout(function () {
            dropboxEnabled = $('#edit-dropbox-enabled').is(':checked');
            if ($(context).val() != '' && $('.time-input input', parent).val() == '' && dropboxEnabled) {
              $('.time-input input', parent).val('11:59PM');
            }
          }, 200);
        });

        sPopupsResizeCenter();

        // set the copy-to-courses button active based on whether any of the addition courses is selected
        if (addlCoursesCheckboxes.is(':checked')) {
          copyToCoursesBtn.addClass('active');
        }
        else {
          copyToCoursesBtn.removeClass('active');
        }
      });

      $(this).attr('checked', false);
      addlElements.hide();

    });

    $('#s-grade-item-add-enable-time', form).click(function () {
      var checked = $(this).is(':checked');
      if (checked) {
        $("#edit-due-date-timeEntry-popup-1-wrapper").show();
      }
      else {
        $("#edit-due-date-timeEntry-popup-1-wrapper").hide();
        $("#edit-due-date-timeEntry-popup-1").val('');
      }
    })
    if ($('#s-grade-item-add-enable-time', form).is(':checked'))
      $("#edit-due-date-timeEntry-popup-1-wrapper").show();

    $('.s-grade-item-addl-courses-enable-time', form).click(function () {
      var checked = $(this).is(':checked');
      if (checked) {
        $(this).next().show();
      }
      else {
        $(this).next().hide();
        $("input", $(this).next()).val('');
      }
    });

    $('#edit-is-final', form).click(function () {
      sGradeItemResolveIndAssign(form, $(this));
      sPopupsResizeCenter();
      toggleDateWarning();
    });


    if ($('#edit-is-final', form).is(':checked')) {
      form.addClass('s-grade-item-is-final');
      $("#category-wrapper", form).hide();
      $(".grading-period-leaf-periods-wrapper", form).hide();
      $('.grading-period-all-periods-wrapper', form).show();
      //Lock down individual assignments for existing grade items
      sGradeItemResolveIndAssign(form, $('#edit-is-final', form));
      sPopupsResizeCenter();
    }

  });

  $("#s-library-template-copy-form:not(.sGradeItemAddForm-processed), #s-library-import-template-form:not(.sGradeItemAddForm-processed)", context).addClass('sGradesItemAddForm-processed').each(function () {
    var form = $(this);
    // "is final" checkbox behavior
    $('.addl-is-final input:not(.sGradeItemAddForm-processed)', form).addClass('sGradeItemAddForm-processed').each(function () {
      var finalBox = $(this);
      finalBox.click(function () {
        var checkbox = $(this);
        var checkboxWrapper = checkbox.parents('.addl-is-final');

        if (checkbox.is(':checked')) {
          checkboxWrapper.siblings(".addl-grading-category").hide();
          checkboxWrapper.siblings(".addl-grading-period").hide();
          checkboxWrapper.siblings('.grading-period-all-periods-wrapper').show();
          sPopupsResizeCenter();
        }
        else {
          checkboxWrapper.siblings(".addl-grading-category").show();
          checkboxWrapper.siblings(".addl-grading-period").show();
          checkboxWrapper.siblings('.grading-period-all-periods-wrapper').hide();
          sPopupsResizeCenter();
        }
      });
    });
    //date picker behavior
    $('.s-grade-item-addl-course-due:not(.sGradeItemAddForm-processed)', form).addClass('sGradeItemAddForm-processed').each(function () {
      var datePicker = $(this);
      var dateInputs = $('input', datePicker);

      if (dateInputs.length > 1) {
        //first input is date
        var day = $(dateInputs[0]);
        //second is time
        var time = $(dateInputs[1]);
        day.blur(function () {
          var dropboxEnableWrapper = datePicker.siblings('.dropbox-enable-wrapper');
          var dropboxEnabledInput = $('input.dropbox-enable', dropboxEnableWrapper);
          var autoAddTime = true;

          //if there is a dropbox and it is not enabled, don't autoAddTime
          if (dropboxEnabledInput.length > 0 && !dropboxEnabledInput.is(':checked')) {
            autoAddTime = false;
          }

          if (autoAddTime) {
            setTimeout(function () {
              if (day.val() != '' && time.val() == '') {
                time.val('11:59PM');
              }
            }, 200);
          }
        });
      }
    });
  });

  //$('#s-library-template-copy-form:not(.sGradeItemAddForm-processed)').addClass('sGradesItemAddForm-processed').each(function(){
  var form = $(this);
  //})

  // homepage smartbox form
  $('#s-grade-item-add-combined-form:not(.sGradesItemAddCombinedForm-processed)').addClass('sGradesItemAddCombinedForm-processed').each(function () {
    var form = $(this);
    var realmChooser = $('#edit-realms', form);
    var courses = $('#addl-courses', form);
    // advanced options show/hide
    var advancedWrapper = $('.advanced-options-wrapper', form);
    $(".toggle-advanced-options", form).click(function () {
      sPopupsResizeCenter();
      if (advancedWrapper.is(':visible')) {
        $(this).removeClass('active');
        advancedWrapper.hide();
      }
      else {
        $(this).addClass('active');
        advancedWrapper.show();
      }
      return false;
    });
    $('body').click(function (e) {
      var target = $(e.target);
      if (advancedWrapper.is(':visible') && !target.hasClass('advanced-options-wrapper') && target.parents('.advanced-options-wrapper').length == 0)
        $(".toggle-advanced-options", form).click();
    });

    realmChooser.bind('sHomeSmartBoxRealmSelectionUpdate', function (e, selected) {
      $('.addl-course', courses).each(function () {
        var course = $(this);
        var courseId = course.attr('id').replace(/^assignment-/, '');
        if ($.inArray(courseId, selected) == -1) {
          course.filter(':visible').hide();
        }
        else {
          courses.show();
          course.filter(':not(:visible)').appendTo(courses).show();
          sGradesApplyHoverListener(course, '#category-wrapper .form-select');
        }
      });

      $('.addl-course-first', courses).removeClass('addl-course-first');
      if (selected.length > 1)
        $('.addl-course:visible:eq(0)', courses).addClass('addl-course-first');

      $('#edit-dropbox-enabled').change(function () {
        $('.due-date').each(function () {
          if ($(this).val() != '') {
            parent = $(this).parents('.addl-course').filter(':first');
            if ($('.time-input input', parent).val() == '') {
              $('.time-input input', parent).val('11:59PM');
            }
          }
        });
      });

      $(".due-date").each(function () {
        $(this).unbind('blur');
        $(this).blur(function () {
          var parent = $(this).parents('.addl-course').filter(':first');
          var context = this;

          setTimeout(function () {
            if ($(context).val() != '' && $('.time-input input', parent).val() == '' && $('#edit-dropbox-enabled').is(':checked')) {
              $(".time-input input", parent).val('11:59PM');
            }
          }, 500);
        });
      });

    });

    // "copy settings" behavior"
    $('.copy-settings', courses).click(function () {
      // clear option-not-found warnings
      $('.option-not-found', courses).remove();

      // gather data
      var addlCourse = $(this).parents('.addl-course');
      var dueDate = $("input[id*=due-due-date-datepicker-popup]", addlCourse).val();
      var dueTime = $("input[id*=due-due-date-timeEntry-popup]", addlCourse).val();
      var categoryTitle = $('.addl-grading-category select option:selected', addlCourse).text();
      var scaleTitle = $('.addl-grading-scale select option:selected', addlCourse).text();

      //Select text from the grading hierarchy input if available, otherwise default to the regular grading period input
      if ($('.grading-period-all-periods-wrapper select option:selected', addlCourse).is(':visible')) {
        var periodTitle = $('.grading-period-all-periods-wrapper select option:selected', addlCourse).text();
        var periodFieldClass = '.grading-period-all-periods-wrapper ';
      }
      else {
        var periodTitle = $('.addl-grading-period select option:selected', addlCourse).text();
        var periodFieldClass = '.addl-grading-period ';
      }

      var optionLock = $('.lock-form-container select', addlCourse).val();
      var optionLockDate = $('.lock-form-container input:eq(0)', addlCourse).val();
      var optionLockTime = $('.lock-form-container input:eq(1)', addlCourse).val();

      // set data
      addlCourse.siblings(':visible').each(function () {
        var addlCourseDest = $(this);
        $("input[id*=due-due-date-datepicker-popup]", addlCourseDest).val(dueDate);
        $("input[id*=due-due-date-timeEntry-popup]", addlCourseDest).val(dueTime);

        var categoryOption = $('.addl-grading-category select option:contains("' + categoryTitle + '")', addlCourseDest);
        if (categoryOption.length) {
          categoryOption.attr('selected', 'selected');
        }
        else {
          sGradeItemAddWarning($('.addl-grading-category select', addlCourseDest), categoryTitle);
        }

        var scaleOption = $('.addl-grading-scale select option:contains("' + scaleTitle + '")', addlCourseDest);
        if (scaleOption.length) {
          scaleOption.attr('selected', 'selected');
        }
        else {
          sGradeItemAddWarning($('.addl-grading-scale select', addlCourseDest), scaleTitle);
        }

        var periodOption = $(periodFieldClass + 'select option:contains("' + periodTitle + '")', addlCourseDest);

        if (periodOption.length) {
          periodOption.attr('selected', 'selected');
        }
        else {
          sGradeItemAddWarning($(periodFieldClass + 'select', addlCourseDest), periodTitle);
        }

        $('.lock-form-container select', addlCourseDest).val(optionLock);
        if (optionLock == 1) {
          $('.lock-form-container input:eq(0)', addlCourseDest).val(optionLockDate);
          $('.lock-form-container input:eq(1)', addlCourseDest).val(optionLockTime);
          $('.lock-form-date-selector-container', addlCourseDest).removeClass('hidden');
        }
        else {
          $('.lock-form-date-selector-container', addlCourseDest).addClass('hidden');
        }
      });
    })

    function sGradeItemAddWarning(object, option) {
      var output = '<span class="option-not-found"><span></span></span>';

      var $output = $(output);
      $output.tipsy({
        html: true,
        title: function () {
          return Drupal.t('%option was not found', {'%option': option});
        }
      });

      object.after($output);
    }

    // "is final" checkbox behaviors
    $('#edit-is-final', form).click(function () {
      if ($(this).is(':checked')) {
        $(".addl-grading-category", courses).hide();
        $(".addl-grading-period", courses).hide();
        $('.grading-period-all-periods-wrapper').show();
      }
      else {
        $(".addl-grading-category", courses).show();
        $(".addl-grading-period", courses).show();
        $('.grading-period-all-periods-wrapper').hide();
      }
    });
  });

  $(document).bind('sAlignmentAlignmentBtnProcessed', function () {
    var selectedRubric = $('#edit-selected-rubric').val();
    if (selectedRubric && selectedRubric != '') {
      sAlignmentDisableAlignmentButton();
    }
    $(document).unbind('sAlignmentAlignmentBtnProcessed');
  });

  $('.availability-section:not(.sGradesItemAddForm-processed)').addClass('sGradesItemAddForm-processed').each(function() {
    var $availabilitySection = $(this);
    var $availability = $('select', $availabilitySection);
    var availability = $availability.val();
    sGradeItemProcessAvailability(availability, $availabilitySection);
    sPopupsResizeCenter();

    $availability.change(function(){
      var availability = $('select', $availabilitySection).val();
      sGradeItemProcessAvailability(availability, $availabilitySection);
      sPopupsResizeCenter();
    });
  });

  $('.password-section:not(.sGradesItemAddForm-processed)').addClass('sGradesItemAddForm-processed').each(function() {
    var $passwordSection = $(this);
    var $passwordSelect = $('select', $passwordSection);
    sGradeItemProcessPassword($passwordSelect.val(), $passwordSection);

    $passwordSelect.change(function(){
      sGradeItemProcessPassword($passwordSelect.val(), $passwordSection);
    });
  });
}

function sGradeItemPopupsCallback(data, options, element) {
  if (data.testQuiz) {
    return sTestQuizPopupCallback(data);
  }

  var nid = data.assignment_nid;
  window.location.href = '/assignment/' + nid;
  return false;
}

function sTestQuizPopupCallback(data) {
  window.location.href = '/course/' + data.section_id + '/assessments/' + data.assignment_nid;
  return false;
}

function sGradeItemResolveIndAssign(form, itemIsFinal) {
  //Helper function to ensure correct individual assignment/"set as midterm/final" form behavior
  if (itemIsFinal.is(':checked')) {
    form.addClass('s-grade-item-is-final');
    $("#category-wrapper", form).hide();
    $(".category-wrapper", form).hide();
    $(".addl-grading-category", form).hide();
    $(".grading-period-leaf-periods-wrapper", form).hide();
    $('.grading-period-all-periods-wrapper', form).show();
    // If individual assignments are already active set a warning message
    if ($('#ind-assign-container', form).hasClass('active')) {
      form.parents('.popups-body').first().prepend('<div id="ind-assign-warn" class="messages warning">' + Drupal.t("Midterm and final grade items cannot be individually assigned") + '</div>');
    }
    // Hide the individual Assign button and clear out any individual assignees
    $('#ind-assign-wrapper', form).addClass('disabled').removeClass('active').attr('disabled-title', Drupal.t('Midterm and final grade items cannot be individually assigned'));
    $('#ind-assign-container.active', form).addClass('hidden').removeClass('active');
    $('.selected-enrollment').remove();
    $('#edit-selected-eids,#edit-selected-gg-ids').val('');
  }
  else {
    form.removeClass('s-grade-item-is-final');
    $("#category-wrapper", form).show();
    $(".category-wrapper", form).show();
    $(".addl-grading-category", form).show();
    $(".grading-period-leaf-periods-wrapper", form).show();
    $('.grading-period-all-periods-wrapper', form).hide();
    //Un-disable the individual assign button but don't un-hide the individual assign textfield container
    //This should reset the visual elements for individual assign to a clean state (button is not active, field is hidden)
    $('#ind-assign-wrapper', form).removeClass('disabled');
    // Remove the finals/individual assign conflict warning message
    $('#ind-assign-warn').remove();
  }
}

function sGradeItemProcessAvailability(availability, $availabilitySection) {
  var startDatepicker = $('.availability-datepicker-row:eq(0)', $availabilitySection);
  var endDatepicker = $('.availability-datepicker-row:eq(1)', $availabilitySection);

  switch(availability) {
    case '0': // S_ASSESSMENT_AVAILABILITY_HIDE
    case '1': // S_ASSESSMENT_AVAILABILITY_SHOW
      startDatepicker.hide();
      endDatepicker.hide();
      break;
    case '2': // S_ASSESSMENT_AVAILABILITY_NOW_UNTIL
      startDatepicker.hide();
      endDatepicker.show();
      break;
    case '3': // S_ASSESSMENT_AVAILABILITY_FROM_UNTIL
      startDatepicker.show();
      endDatepicker.show();
      break;
  }
}

function sGradeItemProcessPassword(passwordSelectValue, $passwordSection) {
  var $passwordField = $('.password-value-wrapper', $passwordSection)
  switch(passwordSelectValue) {
    case '4': // S_GRADE_ITEM_PASSWORD_DISABLE
      $passwordField.hide();
      sPopupsResizeCenter();
      break;
    case '5': // S_GRADE_ITEM_PASSWORD_ENABLE
      $passwordField.show();
      sPopupsResizeCenter();
      break;
  }
}

/**
 * Grading period elements are different based on whether the grading options is checked or not.
 *
 * @param {jQuery|HTMLElement} form
 * @return {jQuery|HTMLElement}
 */
function sGradeItemGetGradingPeriodElement(form) {
  if ($("input[name='is_final']").is(":checked")) {
    return $("select[name='grading_period_id_final'] :selected", form);
  }
  return $("select[name='grading_period_id'] :selected", form);
}

/**
 * Helper to check if grade item form should show due date warning
 *
 * @param {jQuery} form
 * @return {boolean}
 */
function sGradeItemShouldShowDueDateWarning(form) {
  // This would mean s_common_date_helper.js wasn't imported, make sure the date picker still works.
  if (typeof sCommonDateInRange === "undefined") {
    return false;
  }

  return sCommonShouldShowDueDateWarning(
    $("input[name='enable_grading']", form),
    sGradeItemGetGradingPeriodElement(form),
    $("input[name='due_date[date]']:visible, .csm-due-date:visible", form)
  );
}

/**
 * Helper to add the due date warning
 *
 * @param {object} form
 */
function sGradeItemAddDueDateWarning(form) {
  var gradePeriodField = sGradeItemGetGradingPeriodElement(form);
  var siblingElement = $(".grading-period-leaf-periods-wrapper", form).first();
  var warningText = sCommonDateDueDateWarningText(gradePeriodField);
  sCommonDateAddDueDateWarning(warningText, siblingElement, form);
}
;// grading category tooltip
function sGradesApplyHoverListener($form, selectors) {
  var tipsyEnabled = false;
  var $dropdown = $(selectors, $form);
  var selectedValue;
  $dropdown.change(function () {
    selectedValue = $dropdown.find('option:selected').attr('value');
  });

  $dropdown.on('mouseover', function () {
    var $select = $(this);
    if (selectedValue === '0') {
     $select.tipsy({
       html: true,
       gravity: 's',
       trigger: 'manual',
       title: function () {
         return Drupal.t('Ungraded items cannot be scored and do not appear in the default view of the gradebook. To view this item from your gradebook, use the Ungraded filter in the All Categories drop-down menu.');
       }
     });
     tipsyEnabled = true;
     $select.tipsy('show');
    }
    else if (tipsyEnabled) {
      $select.tipsy('hide');
      tipsyEnabled = false;
    }
  });
  $form.on('mouseout', selectors, function () {
    var $select = $(this);
    if (tipsyEnabled){
      $select.tipsy('hide');
      tipsyEnabled = false;
    }
  });
};/*
 * jQuery Form Plugin
 * version: 2.25 (08-APR-2009)
 * @requires jQuery v1.2.2 or later
 * @note This has been modified for ajax.module
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}(';(5($){$.B.1s=5(u){2(!4.G){R(\'1b: 2M 9 2N - 2O 2P 1t\');6 4}2(S u==\'5\')u={T:u};3 v=4.14(\'1c\')||1d.2Q.2R;v=(v.2S(/^([^#]+)/)||[])[1];v=v||\'\';u=$.1n({1e:v,H:4.14(\'1u\')||\'1Q\'},u||{});3 w={};4.L(\'C-1R-1S\',[4,u,w]);2(w.1T){R(\'1b: 9 1U 1o C-1R-1S L\');6 4}2(u.1v&&u.1v(4,u)===I){R(\'1b: 9 1f 1o 1v 1V\');6 4}3 a=4.1w(u.2T);2(u.J){u.O=u.J;K(3 n 1x u.J){2(u.J[n]2U 15){K(3 k 1x u.J[n])a.D({7:n,8:u.J[n][k]})}E a.D({7:n,8:u.J[n]})}}2(u.1y&&u.1y(a,4,u)===I){R(\'1b: 9 1f 1o 1y 1V\');6 4}4.L(\'C-9-1W\',[a,4,u,w]);2(w.1T){R(\'1b: 9 1U 1o C-9-1W L\');6 4}3 q=$.1z(a);2(u.H.2V()==\'1Q\'){u.1e+=(u.1e.2W(\'?\')>=0?\'&\':\'?\')+q;u.J=F}E u.J=q;3 x=4,V=[];2(u.2X)V.D(5(){x.1X()});2(u.2Y)V.D(5(){x.1Y()});2(!u.16&&u.17){3 y=u.T||5(){};V.D(5(a){$(u.17).2Z(a).P(y,1Z)})}E 2(u.T)V.D(u.T);u.T=5(a,b){K(3 i=0,M=V.G;i<M;i++)V[i].30(u,[a,b,x])};3 z=$(\'W:31\',4).18();3 A=I;K(3 j=0;j<z.G;j++)2(z[j])A=Q;2(u.20||A){2(u.21)$.32(u.21,1A);E 1A()}E $.33(u);4.L(\'C-9-34\',[4,u]);6 4;5 1A(){3 h=x[0];2($(\':W[7=9]\',h).G){35(\'36: 37 22 38 39 3a 3b "9".\');6}3 i=$.1n({},$.23,u);3 s=$.1n(Q,{},$.1n(Q,{},$.23),i);3 j=\'3c\'+(1B 3d().3e());3 k=$(\'<20 3f="\'+j+\'" 7="\'+j+\'" 24="25:26" />\');3 l=k[0];k.3g({3h:\'3i\',27:\'-28\',29:\'-28\'});3 m={1f:0,19:F,1g:F,3j:0,3k:\'n/a\',3l:5(){},2a:5(){},3m:5(){},3n:5(){4.1f=1;k.14(\'24\',\'25:26\')}};3 g=i.2b;2(g&&!$.1C++)$.1h.L("3o");2(g)$.1h.L("3p",[m,i]);2(s.2c&&s.2c(m,s)===I){s.2b&&$.1C--;6}2(m.1f)6;3 o=0;3 p=0;3 q=h.U;2(q){3 n=q.7;2(n&&!q.1i){u.O=u.O||{};u.O[n]=q.8;2(q.H=="X"){u.O[7+\'.x\']=h.Y;u.O[7+\'.y\']=h.Z}}}1j(5(){3 t=x.14(\'17\'),a=x.14(\'1c\');h.1k(\'17\',j);2(h.2d(\'1u\')!=\'2e\')h.1k(\'1u\',\'2e\');2(h.2d(\'1c\')!=i.1e)h.1k(\'1c\',i.1e);2(!u.3q){x.14({3r:\'2f/C-J\',3s:\'2f/C-J\'})}2(i.1D)1j(5(){p=Q;11()},i.1D);3 b=[];2g{2(u.O)K(3 n 1x u.O)b.D($(\'<W H="3t" 7="\'+n+\'" 8="\'+u.O[n]+\'" />\').2h(h)[0]);k.2h(\'1l\');l.2i?l.2i(\'2j\',11):l.3u(\'2k\',11,I);h.9()}3v{h.1k(\'1c\',a);t?h.1k(\'17\',t):x.3w(\'17\');$(b).2l()}},10);3 r=0;5 11(){2(o++)6;l.2m?l.2m(\'2j\',11):l.3x(\'2k\',11,I);3 c=Q;2g{2(p)3y\'1D\';3 d,N;N=l.2n?l.2n.2o:l.2p?l.2p:l.2o;2((N.1l==F||N.1l.2q==\'\')&&!r){r=1;o--;1j(11,2r);6}m.19=N.1l?N.1l.2q:F;m.1g=N.2s?N.2s:N;m.2a=5(a){3 b={\'3z-H\':i.16};6 b[a]};2(i.16==\'3A\'||i.16==\'3B\'){3 f=N.1E(\'1F\')[0];m.19=f?f.8:m.19}E 2(i.16==\'2t\'&&!m.1g&&m.19!=F){m.1g=2u(m.19)}d=$.3C(m,i.16)}3D(e){c=I;$.3E(i,m,\'2v\',e)}2(c){i.T(d,\'T\');2(g)$.1h.L("3F",[m,i])}2(g)$.1h.L("3G",[m,i]);2(g&&!--$.1C)$.1h.L("3H");2(i.2w)i.2w(m,c?\'T\':\'2v\');1j(5(){k.2l();m.1g=F},2r)};5 2u(s,a){2(1d.2x){a=1B 2x(\'3I.3J\');a.3K=\'I\';a.3L(s)}E a=(1B 3M()).3N(s,\'1G/2t\');6(a&&a.2y&&a.2y.1p!=\'3O\')?a:F}}};$.B.3P=5(c){6 4.2z().2A(\'9.C-1q\',5(){$(4).1s(c);6 I}).P(5(){$(":9,W:X",4).2A(\'2B.C-1q\',5(e){3 a=4.C;a.U=4;2(4.H==\'X\'){2(e.2C!=12){a.Y=e.2C;a.Z=e.3Q}E 2(S $.B.2D==\'5\'){3 b=$(4).2D();a.Y=e.2E-b.29;a.Z=e.2F-b.27}E{a.Y=e.2E-4.3R;a.Z=e.2F-4.3S}}1j(5(){a.U=a.Y=a.Z=F},10)})})};$.B.2z=5(){4.2G(\'9.C-1q\');6 4.P(5(){$(":9,W:X",4).2G(\'2B.C-1q\')})};$.B.1w=5(b){3 a=[];2(4.G==0)6 a;3 c=4[0];3 d=b?c.1E(\'*\'):c.22;2(!d)6 a;K(3 i=0,M=d.G;i<M;i++){3 e=d[i];3 n=e.7;2(!n)1H;2(b&&c.U&&e.H=="X"){2(!e.1i&&c.U==e)a.D({7:n+\'.x\',8:c.Y},{7:n+\'.y\',8:c.Z});1H}3 v=$.18(e,Q);2(v&&v.1r==15){K(3 j=0,2H=v.G;j<2H;j++)a.D({7:n,8:v[j]})}E 2(v!==F&&S v!=\'12\')a.D({7:n,8:v})}2(!b&&c.U){3 f=c.1E("W");K(3 i=0,M=f.G;i<M;i++){3 g=f[i];3 n=g.7;2(n&&!g.1i&&g.H=="X"&&c.U==g)a.D({7:n+\'.x\',8:c.Y},{7:n+\'.y\',8:c.Z})}}6 a};$.B.3T=5(a){6 $.1z(4.1w(a))};$.B.3U=5(b){3 a=[];4.P(5(){3 n=4.7;2(!n)6;3 v=$.18(4,b);2(v&&v.1r==15){K(3 i=0,M=v.G;i<M;i++)a.D({7:n,8:v[i]})}E 2(v!==F&&S v!=\'12\')a.D({7:4.7,8:v})});6 $.1z(a)};$.B.18=5(a){K(3 b=[],i=0,M=4.G;i<M;i++){3 c=4[i];3 v=$.18(c,a);2(v===F||S v==\'12\'||(v.1r==15&&!v.G))1H;v.1r==15?$.3V(b,v):b.D(v)}6 b};$.18=5(b,c){3 n=b.7,t=b.H,1a=b.1p.1I();2(S c==\'12\')c=Q;2(c&&(!n||b.1i||t==\'1m\'||t==\'3W\'||(t==\'1J\'||t==\'1K\')&&!b.1L||(t==\'9\'||t==\'X\')&&b.C&&b.C.U!=b||1a==\'13\'&&b.1M==-1))6 F;2(1a==\'13\'){3 d=b.1M;2(d<0)6 F;3 a=[],1N=b.3X;3 e=(t==\'13-2I\');3 f=(e?d+1:1N.G);K(3 i=(e?d:0);i<f;i++){3 g=1N[i];2(g.1t){3 v=g.8;2(!v)v=(g.1O&&g.1O[\'8\']&&!(g.1O[\'8\'].3Y))?g.1G:g.8;2(e)6 v;a.D(v)}}6 a}6 b.8};$.B.1Y=5(){6 4.P(5(){$(\'W,13,1F\',4).2J()})};$.B.2J=$.B.3Z=5(){6 4.P(5(){3 t=4.H,1a=4.1p.1I();2(t==\'1G\'||t==\'40\'||1a==\'1F\')4.8=\'\';E 2(t==\'1J\'||t==\'1K\')4.1L=I;E 2(1a==\'13\')4.1M=-1})};$.B.1X=5(){6 4.P(5(){2(S 4.1m==\'5\'||(S 4.1m==\'41\'&&!4.1m.42))4.1m()})};$.B.43=5(b){2(b==12)b=Q;6 4.P(5(){4.1i=!b})};$.B.2K=5(b){2(b==12)b=Q;6 4.P(5(){3 t=4.H;2(t==\'1J\'||t==\'1K\')4.1L=b;E 2(4.1p.1I()==\'2L\'){3 a=$(4).44(\'13\');2(b&&a[0]&&a[0].H==\'13-2I\'){a.45(\'2L\').2K(I)}4.1t=b}})};5 R(){2($.B.1s.46&&1d.1P&&1d.1P.R)1d.1P.R(\'[47.C] \'+15.48.49.4a(1Z,\'\'))}})(4b);',62,260,'||if|var|this|function|return|name|value|submit||||||||||||||||||||||||||||fn|form|push|else|null|length|type|false|data|for|trigger|max|doc|extraData|each|true|log|typeof|success|clk|callbacks|input|image|clk_x|clk_y||cb|undefined|select|attr|Array|dataType|target|a_fieldValue|responseText|tag|ajaxSubmit|action|window|url|aborted|responseXML|event|disabled|setTimeout|setAttribute|body|reset|extend|via|tagName|plugin|constructor|a_ajaxSubmit|selected|method|beforeSerialize|a_formToArray|in|beforeSubmit|param|fileUpload|new|active|timeout|getElementsByTagName|textarea|text|continue|toLowerCase|checkbox|radio|checked|selectedIndex|ops|attributes|console|GET|pre|serialize|veto|vetoed|callback|validate|a_resetForm|a_clearForm|arguments|iframe|closeKeepAlive|elements|ajaxSettings|src|about|blank|top|1000px|left|getResponseHeader|global|beforeSend|getAttribute|POST|multipart|try|appendTo|attachEvent|onload|load|remove|detachEvent|contentWindow|document|contentDocument|innerHTML|100|XMLDocument|xml|toXml|error|complete|ActiveXObject|documentElement|a_ajaxFormUnbind|bind|click|offsetX|offset|pageX|pageY|unbind|jmax|one|a_clearFields|a_selected|option|skipping|process|no|element|location|href|match|semantic|instanceof|toUpperCase|indexOf|resetForm|clearForm|html|apply|file|get|ajax|notify|alert|Error|Form|must|not|be|named|jqFormIO|Date|getTime|id|css|position|absolute|status|statusText|getAllResponseHeaders|setRequestHeader|abort|ajaxStart|ajaxSend|skipEncodingOverride|encoding|enctype|hidden|addEventListener|finally|removeAttr|removeEventListener|throw|content|json|script|httpData|catch|handleError|ajaxSuccess|ajaxComplete|ajaxStop|Microsoft|XMLDOM|async|loadXML|DOMParser|parseFromString|parsererror|a_ajaxForm|offsetY|offsetLeft|offsetTop|a_formSerialize|a_fieldSerialize|merge|button|options|specified|a_clearInputs|password|object|nodeType|a_enable|parent|find|debug|jquery|prototype|join|call|jQuery'.split('|'),0,{}));/**
 * Automatic ajax validation
 *
 * @see http://drupal.org/project/ajax
 * @see irc://freenode.net/#drupy
 * @depends Drupal 6
 * @author brendoncrawford
 * @note This file uses a 79 character width limit.
 * 
 *
 */

Drupal.Ajax = new Object;

Drupal.Ajax.plugins = {};

Drupal.Ajax.firstRun = false;

/**
 * Init function.
 * This is being executed by Drupal behaviours.
 * See bottom of script.
 * 
 * @param {HTMLElement} context
 * @return {Bool}
 */
Drupal.Ajax.init = function(context) {
  var f, s;
  if (f = $('.ajax-form:not(.AjaxProcessed)', context).addClass('AjaxProcessed')) {  
    if (!Drupal.Ajax.firstRun) {
      Drupal.Ajax.invoke('init');
      Drupal.Ajax.firstRun = true;
    }
    s = $('input[type="submit"]', f);
    s.click(function(e){
      var $submit = $(this);
      this.form.ajax_activator = $submit;
      //Allow us to handle pre-submit event by attach function callback to submit element
      var beforeSubmit = $submit.data('beforeSubmitHandler');
      if (typeof beforeSubmit === 'function') {
        beforeSubmit(e);
      }
      return true;
    });
    f.each(function(){
      this.ajax_activator = null;
      $(this).submit(function(){
        if (this.ajax_activator === null) {
          this.ajax_activator = $('.form-submit', this);
        }
        if (this.ajax_activator.hasClass('ajax-trigger')) {
          Drupal.Ajax.go($(this), this.ajax_activator);
          return false;
        }
        else {
          return true;
        }
      });
      return true;
    });
  }
  return true;
};

/**
 * Invokes plugins
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 */
Drupal.Ajax.invoke = function(hook, args) {
  var plugin, r, ret;
  ret = true;
  for (plugin in Drupal.Ajax.plugins) {
    r = Drupal.Ajax.plugins[plugin](hook, args);
    if (r === false) {
      ret = false;
    }
  }
  return ret;
};

/**
 * Handles submission
 * 
 * @param {Object} submitter_
 * @return {Bool}
 */
Drupal.Ajax.go = function(formObj, submitter) {
  var submitterVal, submitterName, extraData;
  Drupal.Ajax.invoke('submit', {submitter:submitter});
  submitterVal = submitter.val();
  submitterName = submitter.attr('name');
  extraData = {};
  extraData[submitterName] = submitterVal;
  extraData['drupal_ajax'] = '1';
  formObj.a_ajaxSubmit({
    extraData : extraData,
    beforeSubmit : function(data) {
      data[data.length] = {
        name : submitterName,
        value : submitterVal
      };
      data[data.length] = {
        name : 'drupal_ajax',
        value : '1'
      };
      return true;
    },
    dataType : 'json',
    error: function (XMLHttpRequest, textStatus, errorThrown) {
      window.alert(Drupal.t('ajax.module: An unknown error has occurred.'));
      // log the error
      $.post('/popups_error', {
        'error': textStatus,
        'status' : XMLHttpRequest.status,
        'response' : XMLHttpRequest.responseText,
        'error_type' : 'ajax',
      });
      if (window.console) {
        console.log('error', arguments);
      }
      return true;
    },
    success: function(data){
      submitter.val(submitterVal);
      Drupal.Ajax.response(submitter, formObj, data);
      return true;
    }
  });
  return false;
};

/**
 * Handles messaging
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 * @param {Object} data
 * @param {Object} options
 * @return {Bool}
 */
Drupal.Ajax.message = function(formObj, submitter, data, options) {
  var args; 
  data.local = {
    submitter : submitter,
    form : formObj
  };
  if (Drupal.Ajax.invoke('message', data)) {
    Drupal.Ajax.writeMessage(data.local.form, data.local.submitter, options);
    Drupal.Ajax.invoke('afterMessage', data);
  }
  return true;
};

/**
 * Writes message
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 * @param {Object} options
 * @return {Bool}
 */
Drupal.Ajax.writeMessage = function(formObj, submitter, options) {
  var i, _i, thisItem, log, errBox, h, data;
  if (options.action === 'notify') {
    // Cleanups
    $('.messages, .ajax-preview', formObj).remove();
    $('input, textarea').removeClass('error status warning required');
    // Preview
    if (options.type === 'preview') {
      log = $('<div>').addClass('ajax-preview');
      log.html(options.messages);
      formObj.prepend(log);
    }
    // Status, Error, Message
    else {
      log = $('<ul>');
      errBox = $(".messages." + options.type, formObj[0])
      for (i = 0, _i = options.messages.length; i < _i; i++) {
        thisItem = $('#' + options.messages[i].id, formObj[0])
        thisItem.addClass(options.type);
        if (options.messages[i].required) {
          thisItem.addClass('required');
        }
        log.append('<li>' + options.messages[i].value + '</li>');
      }
      if (errBox.length === 0) {
        errBox = $("<div class='messages " + options.type + "'>");
        formObj.prepend(errBox);
      }
      errBox.html(log); 
    }
  }
  else if (options.action === 'clear') {
    $('.messages, .ajax-preview', formObj).remove();
  }
  return true;
};

/**
 * Updates message containers
 * 
 * @param {Object} updaters
 * @return {Bool}
 */
Drupal.Ajax.updater = function(updaters) {
  var i, _i, elm;
  for (i = 0, _i = updaters.length; i < _i; i++) {
    elm = $(updaters[i].selector);
    // HTML:IN
    if (updaters[i].type === 'html_in') {
      elm.html(updaters[i].value);
    }
    // HTML:OUT
    else if (updaters[i].type === 'html_out') {
      elm.replaceWith(updaters[i].value);
    }
    // FIELD
    else if (updaters[i].type === 'field') {
      elm.val(updaters[i].value);
    }
    // REMOVE
    else if(updaters[i].type === 'remove') {
      elm.remove();
    }
  }
  return true;
};

/**
 * Handles data response
 * 
 * @param {Object} submitter
 * @param {Object} formObj
 * @param {Object} data
 * @return {Bool}
 */
Drupal.Ajax.response = function(submitter, formObj, data){
  var newSubmitter;
  data.local = {
    submitter : submitter,
    form : formObj
  };
  /**
   * Failure
   */
  if (data.status === false) {
    Drupal.Ajax.updater(data.updaters);
    Drupal.Ajax.message(formObj, submitter, data, {
      action : 'notify',
      messages : data.messages_error,
      type : 'error'
    });
  }
  /**
   * Success
   */
  else {
    // Display preview
    if (data.preview !== null) {
      Drupal.Ajax.updater(data.updaters);
      Drupal.Ajax.message(formObj, submitter, data, {
        action : 'notify',
        messages : decodeURIComponent(data.preview),
        type : 'preview'
      });
    }
    // If no redirect, then simply show messages
    else if (data.redirect === null) {
      if (data.messages_status.length > 0) {
        Drupal.Ajax.message(formObj, submitter, data, {
          action : 'notify',
          messages : data.messages_status,
          type : 'status'
        });
      }
      if (data.messages_warning.length > 0) {
        Drupal.Ajax.message(formObj, submitter, data, {
          action : 'notify',
          messages : data.messages_warning,
          type : 'warning'
        });
      }
      if (data.messages_status.length === 0 &&
          data.messages_warning.length === 0) {
        Drupal.Ajax.message(formObj, submitter, data, {action:'clear'});
      }
    }
    // Redirect
    else {
      if (Drupal.Ajax.invoke('redirect', data)) {
        Drupal.Ajax.redirect( data.redirect );
      }
      else {
        Drupal.Ajax.updater(data.updaters);
        if (data.messages_status.length === 0 &&
            data.messages_warning.length === 0) {
          Drupal.Ajax.message(formObj, submitter, data, {action:'clear'});
        }
        else {
          Drupal.Ajax.message(formObj, submitter, data, {
            action : 'notify',
            messages : data.messages_status,
            type : 'status'
          });
        }
      }
    }
  }
  return true;
};


/**
 * Redirects to appropriate page
 * 
 * @todo
 *   Some of this functionality should possibly hapen on
 *   the server instead of client.
 * @param {String} url
 */
Drupal.Ajax.redirect = function(url) {
  window.location.href = url;
};

Drupal.behaviors.Ajax = Drupal.Ajax.init;



;(function () {
  /**
   * Prevent this from being declared multiple times
   */
  if (window._initPendo) {
    return;
  }

  /**
   * Defines a method on `window` to initialize the Pendo.io application
   * @see https://app.pendo.io/admin/settings
   * @param {Object} visitor A subset of the user object
   * @param {Object} account Some school info
   * @param {String} apiKey The provided API key
   */
  window._initPendo = function(visitor, account, apiKey) {
    // Prevent pendo from being initialized multiple times
    if (window._pendoInitialized) {
      return;
    }

    // Pendo engine loading
    (function(p,e,n,d,o){var v,w,x,y,z;o=p[d]=p[d]||{};o._q=[];
    v=['initialize','identify','updateOptions','pageLoad'];for(w=0,x=v.length;w<x;++w)(function(m){
    o[m]=o[m]||function(){o._q[m===v[0]?'unshift':'push']([m].concat([].slice.call(arguments,0)));};})(v[w]);
    y=e.createElement(n);y.async=!0;y.src='https://ustats-cdn.schoology.com/agent/static/'+apiKey+'/pendo.js';
    z=e.getElementsByTagName(n)[0];z.parentNode.insertBefore(y,z);})(window,document,'script','pendo');

    // Call this whenever information about your visitors becomes available
    // Please use Strings, Numbers, or Bools for value types.
    pendo.initialize({
      apiKey: apiKey,
      visitor: visitor,
      account: account
    });

    // Prevent initializing pendo multiple times
    // This could occur from AJAX popups
    window._pendoInitialized = true;
  }
})();
;